[tool.poetry]
name = "neomate-ai"
version = "0.1.0"
description = "A highly advanced, local-first, open-source autonomous agent designed to be a true digital companion."
authors = ["NeoMate AI Team <team@neomate.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-repo/neomate-ai"
repository = "https://github.com/your-repo/neomate-ai"
documentation = "https://neomate-ai.readthedocs.io/"
keywords = ["ai", "assistant", "automation", "voice", "vision", "open-source"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "*", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
pyyaml = "^6.0"
torch = "^2.0"
opencv-python = "^4.8"
pyautogui = "^0.9"
requests = "^2.31"
beautifulsoup4 = "^4.12"
# pyqt5 = "^5.15"
cryptography = "^41.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4"
black = "^23.0"
ruff = "^0.1"

[tool.poetry.scripts]
neomate = "neomate_ai.main:main"

[tool.poetry.extras]
gpu = ["torch"]
whisper = ["openai-whisper"]
tts = ["coqui-tts"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"] # assert false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
